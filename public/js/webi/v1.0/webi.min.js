/*
 * webi.JS
 * version 1.0
 * author: zoey
 */
(function(){

	var q = void 0,
        r = !0,
        t = null,
        u = !1;

    function isNumber(val){
        var regPos = /^\d+(\.\d+)?$/; //非负浮点数
        var regNeg = /^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/; //负浮点数
        if(regPos.test(val) || regNeg.test(val)){
            return true;
        }else{
            return false;
        }
    }

	var WeBI = {};
	
	WeBI.webi_dt = {}; //存储大的数据结构
	WeBI.bi_content = []; //存储各个模块坐标信息
    WeBI.p_id = ''; //展示报表的DIV元素ID

	WeBI.op = {};
    WeBI.op.chart = {};
    WeBI.op.chart.parent = 'grid_'; //报表最外层div的id前缀
    WeBI.op.chart.bi = 'chart_'; //报表div的id前缀
	WeBI.op.bi_obj = {}; //用于存放chart类型BI对象
	WeBI.op.edit_bi_list = {}; //用于存放编辑的bi对象
	WeBI.op.sort_module = {}; //用于存放module排序之后的数组

	/*
	 * parent_id 存放报表的父级元素ID
	 * webi_dt 
	 * bi_html  页面展示BI的html结构代码 $uid
	 */
	WeBI.op.a = function (parent_id,webi_dt,bi_html,design,mode){

        WeBI.p_id = parent_id;
        WeBI.webi_dt = webi_dt;
        WeBI.bi_mode = mode || 1; //用于区分设计页
        this.bi_html = bi_html || '';
        this.bi_design = design || 1; //默认处于编辑模式

        //主界面的设置
        this.a_a();

		if( typeof webi_dt.module != 'undefined' && Object.keys(webi_dt.module).length > 0 ){

            this.create_sort_obj();
            this.a_b(webi_dt.master,webi_dt.module); //贴上模块

            //开启监听
            if( this.bi_design == 2 ){
                WeBI.op.reCount();
                this.a_c();
            }

        }

	}
	
	WeBI.op.a_a = function(){
		
        var win_size = F.findDimensions();

		var main_obj = WeBI.webi_dt.master.general || {};

		var oP = document.getElementById(WeBI.p_id);

		if( this.bi_design == 2 ){
            oP.style.width = win_size.winWidth + 'px';
            oP.style.height = win_size.winHeight + 'px';
		}

        oP.style.background = main_obj.backgroundColor || '#E6E6E6';
        oP.style.backgroundImage = main_obj.backgroundImage != '' ? 'url('+main_obj.backgroundImage+')' : '';
        oP.style.backgroundRepeat = 'no-repeat';
        oP.style.backgroundSize = '100% 100%';

        oP.style.borderImageSource = main_obj.border_image_source != '' ? 'url('+main_obj.border_image_source+')' : '';
        oP.style.borderImageWidth = main_obj.border || 0;
        oP.style.borderImageSlice = main_obj.border_image_slice || 0;
        oP.style.borderImageRepeat = main_obj.border_image_repeat || 'repeat';

	}
	WeBI.op.a_b = function(master,module){

		if( typeof this.bi_obj == 'undefined' ){
			this.bi_obj = {};
		}

		var oP = document.getElementById(WeBI.p_id);
		var main_width = oP.offsetWidth;
		var main_height = oP.offsetHeight;

		for( k in module ){

            this.create_module(k , module[k]);
		}

        var win_size = F.findDimensions();
        this.is_mobile = F.isMobile();

		if( this.bi_design == 2 && (this.is_mobile==1 || win_size.winWidth <= 800) ){
            var top_value = this.suite();
		} else {
            var top_value = parseInt(this.sort_module[this.sort_module.length-1].top)
                          + parseInt(this.sort_module[this.sort_module.length-1].height);
        }

        //幕布的高度调整
        if( parseInt(top_value) > parseInt(win_size.winHeight) ){
            oP.style.height = (parseInt(top_value) + 10) + 'px';
        }

		return this.bi_obj;
		
	}
    WeBI.op.a_c = function(master,module){
        window.addEventListener("resize", function () {
            WeBI.op.resize(); //让报表样式自适应浏览器变化
        });
    }

    //按坐标生成排序对象
    WeBI.op.create_sort_obj = function() {

        WeBI.bi_content = [];

        for( var uid in WeBI.webi_dt.module ){
            WeBI.bi_content.push({
                uid:uid,
                top:WeBI.webi_dt.module[uid].attribute_json.top,
                height:WeBI.webi_dt.module[uid].attribute_json.height,
                top_percent:WeBI.webi_dt.module[uid].attribute_json.top_percent,
                left_percent:WeBI.webi_dt.module[uid].attribute_json.left_percent,
                width_percent:WeBI.webi_dt.module[uid].attribute_json.width_percent,
                height_percent:WeBI.webi_dt.module[uid].attribute_json.height_percent
            });
        }

        //分别按top和left进行升序排列，这将应用于后面小屏出现时，元素的整体重新排列。
        var sortPos = function (arry) {
            var posCompare = function(p1, p2) {
                if (p1.top_percent > p2.top_percent) {
                    return true;
                } else if (p1.top_percent == p2.top_percent) {
                    return (p1.left_percent > p2.left_percent);
                } else {
                    return false;
                }
            }
            var len = arry.length;
            for (var i = 0; i < len - 1; i++) {
                for (var j = 0; j < len - 1 - i; j++) {
                    if (posCompare(arry[j], arry[j + 1])) {
                        var tmp = arry[j];
                        arry[j] = arry[j + 1];
                        arry[j+1] = tmp;
                    }
                }
            }
            return arry;
        }
        this.sort_module = sortPos(WeBI.bi_content);
    };

    //自适应小屏幕
    WeBI.op.suite = function(){

        var win_size = F.findDimensions();
        var top_value = 0;
        var cycle_num = 0;
        var layui_num = 0;

        for( var k in WeBI.op.sort_module ){

            var uid = WeBI.op.sort_module[k].uid;

            var oModule = document.getElementById(WeBI.op.chart.parent+uid);
            var oChart = document.getElementById(WeBI.op.chart.bi+uid);

            if( cycle_num == 0 ){
                var top_val = 5;
            } else {
                var top_val = parseInt(top_value);
            }

            if( WeBI.webi_dt.module[uid].bi_json.type=='bi_table' && WeBI.webi_dt.module[uid].bi_json.chart_json.type == 'layui'){
                layui_num++;
                if( layui_num > 1 ){top_val += 10;}
            }

            oModule.style.width = (parseInt(win_size.winWidth) - 10) + 'px';
            oModule.style.left = '5px';
            oModule.style.top = top_val + 'px';
            oModule.style.height = WeBI.webi_dt.module[uid].attribute_json.height+'px';


            if( document.getElementById('title_'+uid) ){
                if( WeBI.webi_dt.module[uid].bi_json.type != 'bi_text' ){
                    oChart.style.height = (parseInt(oModule.offsetHeight)-parseInt(document.getElementById('title_'+uid).offsetHeight)) + 'px';
                }
            }
            if( document.getElementById('move_'+uid) ){
                oChart.style.height = (parseInt(oModule.offsetHeight)-parseInt(document.getElementById('move_'+uid).offsetHeight)) + 'px';
            }

            switch (WeBI.webi_dt.module[uid].bi_json.type){
                case 'bi_text':
                    WeBI.content.resize(uid);
                    break;
                case 'bi_table':
                    WeBI.table.resize(uid);
                    break;
                default:
                    WeBI.chart.resize(uid);
            }

            cycle_num++;
            top_value = parseInt(top_val) + parseInt(WeBI.webi_dt.module[uid].attribute_json.height) + 10;
        }

        return top_value;
    }

    //页面自适应
    WeBI.op.resize = function() {

        if( F.isEmptyObject( WeBI.webi_dt.module ) ){return false;}

        //获取当前浏览器的宽高
        var win_size = F.findDimensions();
        var top_value = 0;

        //调整父级DIV的宽高
        var oP = document.getElementById(WeBI.p_id);

        //编辑模式下，不对父级宽度进行自动调整
        if( WeBI.op.bi_design == 2 ){
            oP.style.width = win_size.winWidth + 'px';
            oP.style.height = win_size.winHeight + 'px';
            var true_width = win_size.winWidth;
            var true_height = win_size.winHeight;
        } else {
            var true_width = oP.offsetWidth;
            var true_height = oP.offsetHeight;
        }

        if( WeBI.op.bi_design == 2 && true_width <= 800 ){
            top_value = this.suite();
        } else {
            for( uid in  WeBI.webi_dt.module ){

                var attr = WeBI.webi_dt.module[uid].attribute_json;
                var oModule = document.getElementById(WeBI.op.chart.parent+uid);
                var oChart = document.getElementById(WeBI.op.chart.bi+uid);

                oModule.style.width = ( parseFloat(attr.width_percent) * parseInt(true_width) ) + 'px';
                oModule.style.left = ( parseFloat(attr.left_percent) * parseInt(true_width) ) + 'px';
                oModule.style.transition = "width 0.2s" ;

                if( WeBI.op.bi_design == 2 ){
                    oModule.style.top = ( parseFloat(attr.top_percent) * parseInt(true_height) ) + 'px';
                    oModule.style.height = ( parseFloat(attr.height_percent) * parseInt(true_height) ) + 'px';
                } else {
                    oModule.style.top = attr.top + 'px';
                    oModule.style.height = attr.height + 'px';
                }

                if( document.getElementById('title_'+uid) ){
                    if( WeBI.webi_dt.module[uid].bi_json.type != 'bi_text' ){
                        oChart.style.height = (parseInt(oModule.offsetHeight)-parseInt(document.getElementById('title_'+uid).offsetHeight)) + 'px';
                    }
                }
                if( document.getElementById('move_'+uid) ){
                    oChart.style.height = (parseInt(oModule.offsetHeight)-parseInt(document.getElementById('move_'+uid).offsetHeight)) + 'px';
                }

                switch (WeBI.webi_dt.module[uid].bi_json.type){
                    case 'bi_text':
                        WeBI.content.resize(uid);
                        break;
                    case 'bi_table':
                        WeBI.table.resize(uid);
                        break;
                    default:
                        WeBI.chart.resize(uid);
                }

            }

        }

        //幕布的高度调整
        if( parseInt(top_value) > parseInt(win_size.winHeight) ){
            oP.style.height = (parseInt(top_value) + 10) + 'px';
        }
    };

	//删除某个对象
    WeBI.op.del = function(uid) {
        delete WeBI.webi_dt.module[uid]; //module对象
        delete WeBI.op.edit_bi_list[uid]; //删除临时编辑对象
        delete WeBI.op.bi_obj[uid]; //chart对象
        delete WeBI.content.o[uid]; //module对象
        delete WeBI.content.clock[uid]; //计数器对象（文本计数器类型）
        delete WeBI.table.o[uid]; //表格对象
        this.create_sort_obj();
    };

    /**
     * 重新计算元素的宽高比例
     * @param uid 模块uid
     * @param func 需要执行的函数
     */
    WeBI.op.reCount = function(uid,func) {

        var op_uid = uid || '';
        var op_func = func || '';

        if( op_uid != '' ){
            this.singleCount(uid); //单个重新调整
        } else {
            this.totalCount(); //全部重新计算
        }

        this.create_sort_obj();

        if( typeof func == 'string' && func != ''){
            eval(func).call(this);
        } else if ( typeof func == 'function' ) {
            func.call(this);
        }
    };
    WeBI.op.singleCount = function(uid) {

        var main_width = document.getElementById(WeBI.p_id).offsetWidth;
        var main_height = document.getElementById(WeBI.p_id).offsetHeight;
        var grid_obj = document.getElementById('grid_'+uid);

        WeBI.webi_dt['module'][uid]['attribute_json']['top'] =  grid_obj.offsetTop;
        WeBI.webi_dt['module'][uid]['attribute_json']['height'] = grid_obj.offsetHeight;
        WeBI.webi_dt['module'][uid]['attribute_json']['top_percent'] = (grid_obj.offsetTop/main_height).toFixed(4);
        WeBI.webi_dt['module'][uid]['attribute_json']['height_percent'] = (grid_obj.offsetHeight/main_height).toFixed(4);
        WeBI.webi_dt['module'][uid]['attribute_json']['width_percent'] = (grid_obj.offsetWidth/main_width).toFixed(4);
        WeBI.webi_dt['module'][uid]['attribute_json']['left_percent'] = (grid_obj.offsetLeft/main_width).toFixed(4);

        WeBI.op.create_sort_obj();//重新排序，生成对象
    };
    WeBI.op.totalCount = function() {
        var main_width = document.getElementById(WeBI.p_id).offsetWidth;
        var main_height = document.getElementById(WeBI.p_id).offsetHeight;

        for( var uid in WeBI.webi_dt.module ){
            var grid_obj = document.getElementById(WeBI.op.chart.parent+uid);
            WeBI.webi_dt['module'][uid]['attribute_json']['top'] =  grid_obj.offsetTop;
            WeBI.webi_dt['module'][uid]['attribute_json']['height'] = grid_obj.offsetHeight;
            WeBI.webi_dt['module'][uid]['attribute_json']['top_percent'] = (grid_obj.offsetTop/main_height).toFixed(4);
            WeBI.webi_dt['module'][uid]['attribute_json']['height_percent'] = (grid_obj.offsetHeight/main_height).toFixed(4);
            WeBI.webi_dt['module'][uid]['attribute_json']['width_percent'] = (grid_obj.offsetWidth/main_width).toFixed(4);
            WeBI.webi_dt['module'][uid]['attribute_json']['left_percent'] = (grid_obj.offsetLeft/main_width).toFixed(4);
        }
    };

    /**
	 * 单个BI模块处理
     * @param uid BI模板uid
     * @param module_obj 模板存储各个维度的对象
     */
    WeBI.op.create_module = function(uid,module_obj){

        var oP = document.getElementById(WeBI.p_id);
        var main_width = oP.offsetWidth;
        var main_height = oP.offsetHeight;
        var rim_arr = ['top','right','bottom','left'];

        var bi = module_obj.bi_json;
        var db_json = module_obj.db_json;
        var attribute = module_obj.attribute_json;

        var backgroundColor = attribute.general.backgroundColor || '';
        var backgroundImage = attribute.general.backgroundImage || '';
        var module_rim = attribute.general.rim || {};
        var border = attribute.general.border || '1';
        var border_image_source = attribute.general.border_image_source || '';
        var border_image_slice = attribute.general.border_image_slice || 0;
        var border_image_repeat = attribute.general.border_image_repeat || 'repeat';

        oP.insertAdjacentHTML('beforeend', this.bi_html.replace(/[\$]uid/g, uid));

        var oModule = document.getElementById(WeBI.op.chart.parent+uid);
        var oChart = document.getElementById(WeBI.op.chart.bi+uid);
        var touchO = document.getElementById('touch_'+uid);
        var titleO = document.getElementById('title_'+uid);
        var moveO = document.getElementById('move_'+uid);

        //设置四个边框样式
        for( var i=0; i<4; i++ ){
            var tem_border_attr =  (typeof module_rim[rim_arr[i]] != 'undefined' && module_rim[rim_arr[i]] != '') ? module_rim[rim_arr[i]].split(',') : [];
            var is_show = tem_border_attr[0] ? tem_border_attr[0] : 0;
            var border_style = tem_border_attr[1] ? tem_border_attr[1] : 'solid ';
            var thickness = tem_border_attr[2] ? tem_border_attr[2] : ' 1px ';
            var border_color = tem_border_attr[3] ? tem_border_attr[3] : ' #848484';
            var styleAttr = 'border' + rim_arr[i].charAt(0).toUpperCase() + rim_arr[i].substr(1);
            if( !is_show ){
                oModule.style[styleAttr] = 'none';
            } else {
                oModule.style[styleAttr] =  border_style +' '+ thickness +'px  '+ border_color;
            }
        }

        //常规字体设置
        if( attribute.general.fontFamily != '' ){
            oModule.style.fontFamily = attribute.general.fontFamily;
        }
        if( attribute.general.fontSize != '' ){
            oModule.style.fontSize = attribute.general.fontSize;
        }
        if( attribute.general.color != '' ){
            oModule.style.color = attribute.general.color;
        }
        if( attribute.general.fontStyle != '' ){
            oModule.style.fontStyle = attribute.general.fontStyle;
        }
        if( attribute.general.fontWeight != '' ){
            oModule.style.fontWeight = attribute.general.fontWeight;
        }

        if( touchO ){
            touchO.innerText = attribute.title.value;
            touchO.style.textAlign = attribute.title.legend;
            if( attribute.title.fontFamily != '' ){
                touchO.style.fontFamily = attribute.title.fontFamily;
            }
            if( attribute.title.fontSize != '' ){
                touchO.style.fontSize = attribute.title.fontSize+'px';
            }
            if( attribute.title.color != '' ){
                touchO.style.color = attribute.title.color;
            }
            if( attribute.title.fontStyle != '' ){
                touchO.style.fontStyle = attribute.title.fontStyle;
            }
            if( attribute.title.fontWeight != '' ){
                touchO.style.fontWeight = attribute.title.fontWeight;
            }
        }

        //是否需要标题
        if( attribute.title.switch == 0 ){
            if( titleO ){ oModule.removeChild(document.getElementById('title_'+uid)) }
        } else {
            if( titleO ){

                var aO = titleO.firstChild;
                var rim = attribute.title.rim || {};

                titleO.style.textAlign = attribute.title.legend;
                aO.innerText = attribute.title.value;

                //设置标题四个边框样式
                for( var i=0; i<4; i++ ){
                    var tem_border_attr =  (typeof rim[rim_arr[i]] != 'undefined' && rim[rim_arr[i]] != '') ? rim[rim_arr[i]].split(',') : [];
                    var is_show = tem_border_attr[0] ? tem_border_attr[0] : 0;
                    var border_style = tem_border_attr[1] ? tem_border_attr[1] : 'solid ';
                    var thickness = tem_border_attr[2] ? tem_border_attr[2] : ' 1px';
                    var border_color = tem_border_attr[3] ? tem_border_attr[3] : ' #848484';
                    var styleAttr = 'border' + rim_arr[i].charAt(0).toUpperCase() + rim_arr[i].substr(1);
                    if (!is_show) {
                        titleO.style[styleAttr] = 'none';
                    } else {
                        titleO.style[styleAttr] = border_style +' '+ thickness +'px'+ border_color;
                    }
                }

                if( attribute.title.backgroundColor != '' ){
                    titleO.style.backgroundColor = attribute.title.backgroundColor;
                }
                if( attribute.title.link != '' ){
                    aO.href = attribute.title.link;
                    aO.target = attribute.title.target;
                }
                if( attribute.title.fontFamily != '' ){
                    aO.style.fontFamily = attribute.title.fontFamily;
                }
                if( attribute.title.fontSize != '' ){
                    aO.style.fontSize = attribute.title.fontSize+'px';
                }
                if( attribute.title.color != '' ){
                    aO.style.color = attribute.title.color;
                }
                if( attribute.title.fontStyle != '' ){
                    aO.style.fontStyle = attribute.title.fontStyle;
                }
                if( attribute.title.fontWeight != '' ){
                    aO.style.fontWeight = attribute.title.fontWeight;
                }

                oChart.style.height = (parseInt(attribute.height)-parseInt(document.getElementById('title_'+uid).offsetHeight)) + 'px';
            }
        }

        if( document.getElementById('move_'+uid) ){
            if( attribute.title.backgroundColor != '' ){
                moveO.style.backgroundColor = attribute.title.backgroundColor;
            }
            oChart.style.height = ( parseInt(attribute.height)-parseInt(moveO.offsetHeight) ) + 'px';
        }

        oModule.style.width = (attribute.width_percent * main_width) + 'px';
        oModule.style.left = (attribute.left_percent * main_width) + 'px';
        oModule.style.height = attribute.height + 'px';
        oModule.style.top = attribute.top + 'px';
        oChart.style.background = backgroundColor;

        if( backgroundImage != ''){
            oChart.style.backgroundImage = 'url('+backgroundImage+')';
            oChart.style.backgroundRepeat = 'no-repeat';
            oChart.style.backgroundSize = '100% 100%';
        }
        if( border_image_source != '' ){
            oModule.style.borderImageSource = 'url('+border_image_source+')';
            oModule.style.borderImageWidth = border;
            oModule.style.borderImageSlice = border_image_slice;
            oModule.style.borderImageRepeat = border_image_repeat;
            oModule.style.borderStyle = 'solid';
        }

        switch ( bi.type ){
            case 'bi_table':
                WeBI.table.handle(uid,bi,db_json,attribute);
                break;
            case 'bi_text':
                WeBI.content.handle(uid);
                break;
            default:
                WeBI.chart.handel(uid,bi,db_json,attribute);
        }

	};

    //获取单个模块数据
    WeBI.op.jsonSend = function(uid,param) {
        F.ajax_get(
            '/webi/csql?uid='+uid+'&bi_mode='+WeBI.bi_mode+'&param='+JSON.stringify(param),
            WeBI.op.jsonBack
        );
    };
    //处理jsonp回调数据
    WeBI.op.jsonBack = function(o){

    	var obj = JSON.parse(o); //将返回的字符串处理成对象

		if( obj.code != 200 && obj.code != 0 ){return false;}

		switch ( WeBI.webi_dt.module[obj.uid]['bi_json']['type'] ){
            case 'bi_text':
                WeBI.content.receiveJson(obj.uid,obj.dt);
                break;
            case 'bi_table':
                WeBI.table.receiveJson(obj.uid,obj.dt);
                break;
            default:
                WeBI.chart.receiveJson(obj.uid,obj.dt);
        }

	}

	//将db结构进行重组
    WeBI.op.dbRegroup = function (db_json) {

        var rtn = {
            row:[],
            column:[],
            sum:[]
        }

        if( typeof db_json=='undefined' || db_json===null || typeof db_json != 'object'){
            return rtn;
        }

        var item = ['row','column','sum'];

        for( var i=0; i<3; i++ ){
            if( db_json[item[i]] == '' ){continue;}
            var temp = db_json[item[i]].split(',');

            for (var k=0,len=temp.length;k<len;k++){
                 temp[k] = temp[k].split(':');
            }
            rtn[ item[i] ] = temp;
        }

        return rtn;
    };


    /**
     * 表格处理对象
     */
    WeBI.table = {};
    WeBI.table.o = {};
    WeBI.table.simple = function(uid,data) {

        //设置边框超出高度出现滚动条
        document.getElementById('chart_'+uid).style.overflowY = 'auto';

        var db_struct = WeBI.op.dbRegroup(WeBI.webi_dt.module[uid].db_json);
        var Attr =  WeBI.table.o[uid].attribute;

        var td_column = [];
        var msg_column = [];
        var data_length = data.length;
        var row_length = db_struct.row.length;
        var column_length = db_struct.column.length;
        var sum_length = db_struct.sum.length;
        var series_data = Attr.series;

        if( row_length > 0 ){
            for( var i=0; i<row_length; i++ ){
                td_column.push(db_struct.row[i][0]+':'+db_struct.row[i][1]);
                msg_column.push(db_struct.row[i][1]);
            }
        }
        if( column_length > 0 ){
            for( var i=0; i<column_length; i++ ){
                td_column.push(db_struct.column[i][0]+':'+db_struct.column[i][1]);
                msg_column.push(db_struct.column[i][1]);
            }
        }
        if( sum_length > 0 ){
            for( var i=0; i<sum_length; i++ ){
                td_column.push(db_struct.sum[i][0]+':'+db_struct.sum[i][1]);
                msg_column.push(db_struct.sum[i][1]);
            }
        }

        //计算每行的百分比
        var average_width = parseFloat(1/(row_length+column_length+sum_length)).toFixed(4)*100;

        var table_html = '';
        var tr_height = Attr.table.height+'px';
        var th_html = '';
        var td_style = [];

        td_style.push('text-align:center;overflow:hidden');
        if( !F.isEmptyObject(Attr.table.fontSize) && Attr.table.fontSize != '' ){
            td_style.push('font-size:'+Attr.table.fontSize+'px');
        }
        if( !F.isEmptyObject(Attr.table.color) && Attr.table.color != '' ){
            td_style.push('color:'+Attr.table.color);
        }
        if( !F.isEmptyObject(Attr.table.fontFamily) && Attr.table.fontFamily != '' ){
            td_style.push('font-family:'+Attr.table.fontFamily);
        }
        if( !F.isEmptyObject(Attr.table.fontWeight) && Attr.table.fontWeight != '' ){
            td_style.push('font-weight:'+Attr.table.fontWeight);
        }
        if( !F.isEmptyObject(Attr.table.borderStyle) && Attr.table.borderStyle != ''){
            td_style.push('border-collapse:collapse');
            td_style.push('border-style:'+Attr.table.borderStyle);
            td_style.push('border-color:'+Attr.table.borderColor);
            td_style.push('border-width:'+Attr.table.borderWidth + 'px');
        }

        var td_style_str = td_style.join(';');

        var title_length = msg_column.length;
        for( var i=0; i<title_length; i++ ){

            if( !F.isEmptyObject(Attr.table.td_width) && Attr.table.td_width != "" && !F.isEmptyObject(Attr.table.td_width[td_column[i]]) ){
                var temp_style_str = td_style_str + ';width:'+Attr.table.td_width[td_column[i]]+'%';
            } else {
                var temp_style_str = td_style_str + ';width:'+average_width+'%';
            }
            if( !F.isEmptyObject(Attr.table.legend) && Attr.table.legend != ""){
                temp_style_str = temp_style_str +';text-align:'+Attr.table.legend[td_column[i]];
                if( Attr.table.legend[td_column[i]] != 'center'){
                    temp_style_str = temp_style_str + ';padding-'+ Attr.table.legend[td_column[i]] + ':10px';
                }
            }
            th_html += '<th style="'+temp_style_str+'">'+msg_column[i]+'</th>';
        }

        table_html += '<tr style="height: '+tr_height+'">'+th_html+'</tr>';

        for( var i=0; i<data_length; i++ ){
            var th_tbody = '';
            for( var j=0; j<title_length; j++ ){

                if( i%2 == 0 ){
                    var temp_style_str = td_style_str + ';background-color:'+Attr.table.even_color;
                } else {
                    var temp_style_str = td_style_str + ';background-color:'+Attr.table.backgroundColor;
                }

                if(JSON.stringify(Attr.table.legend) != '{}' && JSON.stringify(Attr.table.legend) != '[]' && Attr.table.legend != ""){
                    temp_style_str = temp_style_str +';text-align:'+Attr.table.legend[td_column[j]];
                    if( Attr.table.legend[td_column[j]]!= 'center'){
                        temp_style_str = temp_style_str +';padding-'+Attr.table.legend[td_column[j]] +':10px';
                    }
                }

                //序列属性设置
                var td_num = data[i][msg_column[j]];
                for(s in series_data){
                    var key_data = s.split(':');

                    if( key_data[1] == msg_column[j] ){
                         td_num = WeBI.attribute.unit(
                                td_num,
                                series_data[s].val_format,
                                series_data[s].unit_format,
                                series_data[s].decimal_num
                            );
                        break;
                    }
                }

                th_tbody += '<td style="'+temp_style_str+'">'+ td_num +'</td>';
            }
            table_html += '<tr style="height: '+tr_height+'">'+th_tbody+'</tr>';
        }

        WeBI.table.o[uid].tableObj.innerHTML = table_html;

    };
    WeBI.table.layui = function(uid,bi,db_json,attribute) {

        var Attr =  WeBI.table.o[uid].attribute;
        var db_struct = WeBI.op.dbRegroup(db_json);
        var row_length = db_struct.row.length;
        var column_length = db_struct.column.length;
        var sum_length = db_struct.sum.length;
        var td_column = [];
        var msg_column = [];

        if( row_length > 0 ){
            for( var i=0; i<row_length; i++ ){
                td_column.push(db_struct.row[i][0]+':'+db_struct.row[i][1]);
                msg_column.push(db_struct.row[i][1]);
            }
        }
        if( column_length > 0 ){
            for( var i=0; i<column_length; i++ ){
                td_column.push(db_struct.column[i][0]+':'+db_struct.column[i][1]);
                msg_column.push(db_struct.column[i][1]);
            }
        }
        if( sum_length > 0 ){
            for( var i=0; i<sum_length; i++ ){
                td_column.push(db_struct.sum[i][0]+':'+db_struct.sum[i][1]);
                msg_column.push(db_struct.sum[i][1]);
            }
        }


        //创建一个初始化的layui表格的数据结构
        var table_json = {
            elem: '#bi_table_'+uid,
            url:'/webi/csql?uid='+uid+'&bi_mode='+WeBI.bi_mode,
            id:'layui_'+uid,
            height: WeBI.table.o[uid].height+'px',
            limit: WeBI.table.o[uid].limit,
            loading: true,
            //page: true,
            data: [],
            cols: []
        };

        //表格的列信息
        var cols = [];

        //计算每行的百分比
        var average_width = parseFloat(1/(row_length+column_length+sum_length)).toFixed(4)*100;

        var item = ['row','column','sum'];
        var style = "";

        for( var i=0; i<3; i++ ){

            var len = db_struct[item[i]].length;
            if( len == 0 ){continue;}

            for( var j=0; j<len; j++ ){

                var general_index = db_struct[item[i]][j][0] + ':' + db_struct[item[i]][j][1];

                if(  Attr.table.td_width != "" && !F.isEmptyObject( Attr.table.td_width[general_index]) ){
                    var true_height = Attr.table.td_width[general_index]+'%';
                } else {
                    var true_height = average_width+'%';
                }
                if( Attr.table.height != "" && !F.isEmptyObject(Attr.table.height) ){
                     style += "height:" + Attr.table.height + "px;";
                }
                if( Attr.table.color != "" && !F.isEmptyObject(Attr.table.color) ){
                   style += "color:" + Attr.table.color + ";";
                }
                 if( Attr.table.fontFamily != "" && !F.isEmptyObject(Attr.table.fontFamily) ){
                   style += "font-family:" + Attr.table.fontFamily + ";";
                }
                if( Attr.table.fontSize != "" && !F.isEmptyObject(Attr.table.fontSize) ){
                    style += "font-size:" + Attr.table.fontSize + "px;";
                }
                if( Attr.table.fontStyle != "" && !F.isEmptyObject(Attr.table.fontStyle) ){
                    style += "font-style:" + Attr.table.fontStyle + ";";
                 }
                if( Attr.table.fontWeight != "" && !F.isEmptyObject(Attr.table.fontWeight) ){
                    style += "font-weight:" + Attr.table.fontWeight + ";";
                 }
                if( Attr.table.backgroundColor != "" && !F.isEmptyObject(Attr.table.backgroundColor) ){
                    style += "background-color:" + Attr.table.backgroundColor + ";";
                }
                if( !F.isEmptyObject(Attr.table.borderStyle) && Attr.table.borderStyle != ''){
                    style += "border-style:" + Attr.table.borderStyle + ";";
                    style += "border-color:" + Attr.table.borderColor + ";";
                    style += "border-width:" + Attr.table.borderWidth + "px;";
                    style += "border-collapse:collapse" + ";";
                }
                if( !F.isEmptyObject(Attr.table.legend) && Attr.table.legend != '' ){
                    style += "text-align:" + Attr.table.legend[td_column[j]] +";";
                    if( Attr.table.legend[td_column[j]] != 'center'){
                        style += ';padding-'+ Attr.table.legend[td_column[j]] +':10px';
                    }
                }

                cols.push(
                    {
                        "field": db_struct[item[i]][j][0].split('.')[1],
                        "title": db_struct[item[i]][j][1],
                        "width": true_height,
                        "sort": true,
                        "style":style
                    }
                );
            }
        }

        //设置表的列信息
        table_json.cols.push(cols);

        layui.use('table', function(){
            layui.table.render(table_json);
        });

    };
    WeBI.table.receiveJson = function(uid,data) {
        WeBI.table.simple(uid,data);
    };
    WeBI.table.handle = function(uid,bi,db_json,attribute) {

        var oChart = document.getElementById(WeBI.op.chart.bi+uid);

        //设置表格宽高
        var table_obj = document.createElement('table');
        table_obj.id = 'bi_table_'+uid;
        table_obj.style.width = '100%';

        if( attribute.table.backgroundColor != '' ){
            table_obj.style.backgroundColor = attribute.table.backgroundColor;
        }
        if( WeBI.op.bi_design == 1 ){
            table_obj.style.height = (oChart.style.height)+'px';
        }
        oChart.appendChild(table_obj);

        if( bi.chart_json.type == 'layui' ){
            table_obj.style.display = 'none';
        }

        WeBI.table.o[uid] = {};
        WeBI.table.o[uid].tableObj = table_obj;
        WeBI.table.o[uid].height = parseInt( document.getElementById(WeBI.op.chart.bi+uid).offsetHeight );

        WeBI.table.o[uid].width = parseInt( document.getElementById(WeBI.op.chart.bi+uid).offsetWidth );
        WeBI.table.o[uid].limit = db_json.limit || 10;
        WeBI.table.o[uid].bi = bi;
        WeBI.table.o[uid].db_json = db_json;
        WeBI.table.o[uid].attribute = attribute;

        if( db_json.row == '' && db_json.column == '' && db_json.sum == '' ){
            console.log('没有找到列表和汇总信息列');
            return false;
        }

        switch ( bi.chart_json.type ){
            case 'simple':
                WeBI.op.jsonSend(uid,[]);
                break;
            case 'layui':
                WeBI.table.layui(uid,bi,db_json,attribute);
                break;
            default:
                console.log('未知的表格类型');
        }

    };
    WeBI.table.resize = function(uid) {
        if( WeBI.webi_dt.module[uid].bi_json.chart_json.type == 'layui'){
            layui.use('table', function(){
                layui.table.reload('layui_'+uid, {
                    height: document.getElementById(WeBI.op.chart.bi+uid).offsetHeight + 'px'
                });
            });
        }
    };

    /*
     * 文本处理对象
     */
    WeBI.content = {};
    WeBI.content.o = {};
    WeBI.content.clock = {};
    WeBI.content.picHandle = function(uid){
        return ;
    };
    WeBI.content.timeCount = function() {
        if(  JSON.stringify(WeBI.content.clock) == '{}' ){
            clearInterval(WeBI.content.interval); //停止计数器
            return false;
        }
        var data_length = WeBI.content.clock.length;
        var date = new Date();
        var year = date.getFullYear()+"";
        var months = date.getMonth()+1;
        var day = date.getDate();
        var hours=date.getHours();
        var minutes=date.getMinutes();
        var seconds=date.getSeconds();

        months = months<10 ? '0'+months : months+"";
        day = day<10 ? '0'+day : day+"";
        hours = hours<10 ? '0'+hours : hours+"";
        minutes = minutes<10 ? '0'+minutes : minutes+"";
        seconds = seconds<10 ? '0'+seconds : seconds+"";
        var time_str = year+'-'+ months+'-'+day+' ' + hours+':'+ minutes+':'+ seconds;

        for( var uid in WeBI.content.clock ){
            WeBI.content.o[uid].content_msg.innerText = time_str;
            var oChart = document.getElementById(WeBI.op.chart.bi+uid);
            WeBI.content.o[uid].box.style.paddingTop = (parseInt(oChart.offsetHeight/2)-parseInt(WeBI.content.o[uid].content_msg.offsetHeight/2))+'px';
        }

    };
    WeBI.content.textHandle = function(uid,data) {

        var oChart = document.getElementById(WeBI.op.chart.bi+uid);
        var text_msg = '';

        if( WeBI.webi_dt.module[uid].db_json.sum != '' ){
            var sum_arr = WeBI.webi_dt.module[uid].db_json.sum.split(',');
            text_msg = data[0][sum_arr[0].split(':')[1]];
        } else if ( WeBI.webi_dt.module[uid].db_json.sum == '' && WeBI.webi_dt.module[uid].db_json.column != '' ){
            var column_arr = WeBI.webi_dt.module[uid].db_json.column.split(',');
            text_msg = data[0][column_arr[0].split(':')[1]];
        }

        WeBI.content.o[uid].content_msg.innerText = text_msg;

        var paddingTop = oChart.offsetHeight - WeBI.content.o[uid].content_msg.offsetHeight - WeBI.content.o[uid].content_title.offsetHeight;
        paddingTop = paddingTop < 0 ? 0 : paddingTop;
        WeBI.content.o[uid].content.style.paddingTop = parseInt(paddingTop/2)+'px';

    };
    WeBI.content.clockHandle = function(uid) {

        WeBI.content.clock[uid] = uid; //计时器
        WeBI.content.interval = setInterval("WeBI.content.timeCount()",1000);//开启计时器

        var attr = WeBI.webi_dt.module[uid].attribute_json;

        if( attr.text && attr.text.prefix && attr.text.prefix.value != '' ){ //前缀
            WeBI.content.o[uid].content_prefix.innerText = attr.text.prefix.value;
        }
        if( attr.text && attr.text.suffix && attr.text.suffix.value != '' ){ //后缀
            WeBI.content.o[uid].content_suffix.innerText = attr.text.suffix.value;
        }

    };
    WeBI.content.containerHandle = function(uid,data) {

        var oChart = document.getElementById(WeBI.op.chart.bi+uid);
        var text_msg = '';
        var Attr = WeBI.webi_dt.module[uid].attribute_json;

        if( WeBI.webi_dt.module[uid].db_json.sum != '' ){
            var sum_arr = WeBI.webi_dt.module[uid].db_json.sum.split(',');
            var series_key = sum_arr[0];
            text_msg = data[0][series_key.split(':')[1]];
        }else if (
            WeBI.webi_dt.module[uid].db_json.sum == ''
            &&
            WeBI.webi_dt.module[uid].db_json.column != ''
        ){
            var column_arr = WeBI.webi_dt.module[uid].db_json.column.split(',');
            var series_key = column_arr[0];
            text_msg = data[0][series_key.split(':')[1]];
        } else if (
            WeBI.webi_dt.module[uid].db_json.sum == ''
            &&
            WeBI.webi_dt.module[uid].db_json.column == ''
            &&
            WeBI.webi_dt.module[uid].db_json.row != ''
        ){
            var row_arr = WeBI.webi_dt.module[uid].db_json.row.split(',');
            var series_key = row_arr[0];
            text_msg = data[0][series_key.split(':')[1]];
        }

        //序列属性
        if(!F.isEmptyObject(WeBI.webi_dt.module[uid].attribute_json.series)) {

            var format = WeBI.webi_dt.module[uid].attribute_json.series[series_key];

            text_msg = WeBI.attribute.unit(text_msg,format.val_format,format.unit_format,format.decimal_num)
        }

        if( Attr.text && Attr.text.prefix && Attr.text.prefix.value != '' ){ //前缀
            WeBI.content.o[uid].content_prefix.innerText = Attr.text.prefix.value;
        }
        if( Attr.text && Attr.text.suffix && Attr.text.suffix.value != '' ){ //后缀
            WeBI.content.o[uid].content_suffix.innerText = Attr.text.suffix.value;
        }

        WeBI.content.o[uid].content_msg.innerText = text_msg;
        WeBI.content.o[uid].box.style.paddingTop = (parseInt(oChart.offsetHeight/2)-parseInt(WeBI.content.o[uid].content_msg.offsetHeight/2))+'px';
    }
    WeBI.content.receiveJson = function(uid,data) {
        WeBI.content.containerHandle(uid,data);
    };
    WeBI.content.handle = function(uid){

        var attr = WeBI.webi_dt.module[uid].attribute_json.general;
        var attrTitle = WeBI.webi_dt.module[uid].attribute_json.title;
        var attrText = WeBI.webi_dt.module[uid].attribute_json.text || {
                'content': [],
                'prefix': [],
                'suffix': []
            };
        var bi = WeBI.webi_dt.module[uid].bi_json;

        var gChart = document.getElementById(WeBI.op.chart.parent+uid);
        var oChart = document.getElementById(WeBI.op.chart.bi+uid);

        var o_new = {
            box:document.createElement('div'),
            content_prefix:document.createElement('span'),
            content_msg:document.createElement('span'),
            content_suffix:document.createElement('span')
        }
        o_new.box.appendChild(o_new.content_prefix);
        o_new.box.appendChild(o_new.content_msg);
        o_new.box.appendChild(o_new.content_suffix);

        //最外层DIV设置
        o_new.box.style.width = '100%';
        o_new.box.style.height = '100%';
        o_new.box.style.textAlign = 'center';
        o_new.box.style.paddingTop = parseInt(oChart.offsetHeight/2)+'px';
        o_new.box.style.fontFamily = '微软雅黑';

        //前缀字体对齐方式(默认居右)
        o_new.content_prefix.style.textAlign = 'right';
        o_new.content_prefix.style.paddingRight = '5px';

        o_new.content_prefix.style.fontSize = attrText.prefix.fontSize != '' ? attrText.prefix.fontSize +'px' : '14px';
        o_new.content_prefix.style.color = attrText.prefix.color != '' ? attrText.prefix.color : '#222433';
        o_new.content_prefix.style.fontFamily = attrText.prefix.fontFamily != '' ? attrText.prefix.fontFamily : '微软雅黑';
        o_new.content_prefix.style.fontStyle = attrText.prefix.fontStyle != '' ? attrText.prefix.fontStyle : 'normal';
        o_new.content_prefix.style.fontWeight = attrText.prefix.fontWeight != '' ? attrText.prefix.fontWeight : 'normal';

        //后缀字体对齐方式(默认居左)
        o_new.content_suffix.style.textAlign = 'left';
        o_new.content_suffix.style.paddingLeft = '5px';

        o_new.content_suffix.style.fontSize = attrText.suffix.fontSize != '' ? attrText.suffix.fontSize +'px' : '14px';
        o_new.content_suffix.style.color = attrText.suffix.color != '' ? attrText.suffix.color : '#222433';
        o_new.content_suffix.style.fontFamily = attrText.suffix.fontFamily != '' ? attrText.suffix.fontFamily : '微软雅黑';
        o_new.content_suffix.style.fontStyle = attrText.suffix.fontStyle != '' ? attrText.suffix.fontStyle : 'normal';
        o_new.content_suffix.style.fontWeight = attrText.suffix.fontWeight != '' ? attrText.suffix.fontWeight : 'normal';

        //消息信息设置
        o_new.content_msg.style.fontSize = attrText.content.fontSize != '' ? attrText.content.fontSize +'px' : '14px';
        o_new.content_msg.style.color = attrText.content.color != '' ? attrText.content.color : '#222433';
        o_new.content_msg.style.fontFamily = attrText.content.fontFamily != '' ? attrText.content.fontFamily : '微软雅黑';
        o_new.content_msg.style.fontStyle = attrText.content.fontStyle != '' ? attrText.content.fontStyle : 'normal';
        o_new.content_msg.style.fontWeight = attrText.content.fontWeight != '' ? attrText.content.fontWeight : 'normal';
        o_new.content_msg.style.textAlign = 'center';

        oChart.innerHTML = '';
        oChart.appendChild(o_new.box);

        //记录文本操作对象
        WeBI.content.o[uid] = o_new;

        switch ( bi.chart_json.type ){
            case 'container':
                WeBI.op.jsonSend(uid,[]);
                break;
            case 'clock':
                o_new.content_msg.style.width = '100%';
                o_new.content_msg.style.height = '100%';
                WeBI.content.clockHandle(uid);
                break;
            case 'pic':
                WeBI.content.picHandle(uid);
                break;
        }

    }
    WeBI.content.resize = function(uid) {
        var bi = WeBI.webi_dt.module[uid].bi_json
        var oChart = document.getElementById(WeBI.op.chart.bi+uid);
        var msg_height = WeBI.content.o[uid].content_msg.offsetHeight;
        WeBI.content.o[uid].box.style.paddingTop = (parseInt(oChart.offsetHeight/2)-parseInt(msg_height/2))+'px';
    };

	/*
	 * 报表chart处理对象
	 */
	WeBI.chart = {};
	WeBI.chart.default = function() {
	    var config = {};
        config.dtseries = {};
        config.legend = {
            'switch': '1',
            'x': 'left',
            'y': 'top'
        };
        config.title = {
            'switch': '0',
            'mainTitle': '',
            'subTitle': '',
            'link': '',
            'target': '_blank',
            'fontFamily': '微软雅黑',
            'fontSize': '14',
            'color': '#F2F2F2',
            'fontStyle': 'normal',
            'fontWeight': 'normal',
            'backgroundColor': '#2EFEF7',
            'x': 'left',
            'y': 'top'
        };
        config.xAxis = {
            'switch': '1',
            'text': '',
            'fontFamily': '',
            'fontSize': '14',
            'color': '#F2F2F2',
            'fontStyle': 'normal',
            'fontWeight': 'normal',
            'scale': '0,0,100'
        };
        config.yAxis = {
            'switch': '1',
            'text': '',
            'fontFamily': '',
            'fontSize': '14',
            'color': '#F2F2F2',
            'fontStyle': 'normal',
            'fontWeight': 'normal',
            'scale': '0,0,100'
        };
        config.tooltip = {
            'switch': '1',
            'backgroundColor': '1,#2EFEF7',
            'borderWidth': '1,5',
            'borderColor': '1,#2EFEF7',
            'fontFamily': '微软雅黑',
            'fontSize': '14',
            'color': '#F2F2F2',
            'fontWeight': 'normal'
        };
        config.toolbox = {
            'dataZoom': '0',
            'dataView': '0',
            'magicType': '0',
            'restore': '0',
            'saveAsImage': '0'
        };
        return config;
    };
    WeBI.chart.structure = function() {
        var options = {};
        options.title = {
            show: false
        };
        options.backgroundColor = '#FAFAFA'; //图表的默认背景颜色（白色）
        options.legend = {
            show: false,
            x : 'center',
            y : 'top'
        };
        options.tooltip = {
            show: false,
            trigger: 'axis',
        };
        options.dataset = {};
        options.dataset.source = [];
        options.xAxis = {
            show: false
        };
        options.yAxis = {
            show: false
        };
        options.toolbox = {
            show: true,
            feature: {
                dataZoom: {show: false},
                dataView: {show: false},
                magicType: {show: false, type: ['line', 'bar']},
                restore: {show: false},
                saveAsImage: {show: false}
            }
        };
        options.series = [];
        options.dataZoom = [
            {
                type: 'slider',
                show: false,
                xAxisIndex: [0],
                filterMode: 'filter',
                start: 0,
                end: 100
            },
            {
                type: 'inside',
                xAxisIndex: [0],
                disabled: true,
                filterMode: 'filter',
                start: 0,
                end: 100
            },
            {
                type: 'slider',
                yAxisIndex: [0],
                show: false,
                filterMode: 'filter',
                start: 0,
                end: 100
            },
            {
                type: 'inside',
                yAxisIndex: [0],
                disabled: true,
                filterMode: 'filter',
                start: 0,
                end: 100
            }//inside   鼠标滚轮操作
        ];//缩放默认

        return options;
    };
    WeBI.chart.dbhandle = function(uid,bi,db_json,attribute) {

        var db_struct = WeBI.op.dbRegroup(db_json);

        bi.row = '';
        bi.column = '';
        bi.db_struct = db_struct;

        var row_length = db_struct.row.length;
        var column_length = db_struct.column.length;
        var sum_length = db_struct.sum.length;

        if( row_length > 0 ){
            for( var i=0; i<row_length; i++ ){
                bi.row += ',' + db_struct.row[i][1];
            }
        }
        if( column_length > 0 ){
            for( var i=0; i<column_length; i++ ){
                bi.column += ',' + db_struct.column[i][1];
            }
        }
        if( sum_length > 0 ){
            for( var i=0; i<sum_length; i++ ){
                bi.column += ',' + db_struct.sum[i][1];
            }
        }

        bi.row = bi.row.substr(1);
        bi.column = bi.column.substr(1);

        WeBI.op.edit_bi_list[uid] = bi;

    };
    WeBI.chart.dataHandle = function(options,data,uid){

        var bi = F.extend({},WeBI.op.edit_bi_list[uid]);

        var chartSeries = bi.chart_json.series;
        var attribute_data = WeBI.webi_dt.module[uid].attribute_json;

        if( typeof data == 'undefined' || data.length==0 || data=='' ){
            return options;
        }

        if( !F.isEmptyObject(bi.chart_json)) {

            for( var k in bi.chart_json ){
                if(k=='series'){continue;}
                if( JSON.stringify(bi.chart_json[k]) == '[]' ){
                    bi.chart_json[k] = {};
                }
                options[k] = bi.chart_json[k];
            }

        }

        if( typeof bi.row == 'undefined' ){
            bi.row = '';
        }
        if( typeof bi.column == 'undefined' ){
            bi.column = '';
        }

        if( bi.row == '' && bi.column == '' ){
            return options;
        }

        var bi_row = bi.row.split(',');
        var bi_column = bi.column.split(',');

        var row_length = bi_row.length;
        var column_length = bi_column.length;

        //设置第一行维度
        options.dataset.source[0] = [];
        var dimension = '';
        for (var row_i=0; row_i<row_length; row_i++){
            dimension += '-' + bi_row[row_i] ;
        }
        options.dataset.source[0].push(dimension.substr(1));

        //设置默认的彩色集合
        var colorList = ['#2E9AFE', '#00FA9A', '#9F81F7', '#40E0D0', '#87CEEB', '#7B68EE', '#FF8C00'];

        chartSeries.itemStyle = {};
        chartSeries.itemStyle = {
            normal: {
                // 定制显示（按顺序）
                color: function(a) {
                 if( typeof a != 'undefined'){
                     return colorList[a.dataIndex];
                 }
                }
            }
        };

        //图例
        if (JSON.stringify(options.legend) !== '{}') {
            options.legend.data = [];
            for( var k in bi_row ){
                options.legend.data.push(bi_row[k]);
            }
        }

        //使用类目轴 axis，无类目轴 item
        if (['bar', 'line', 'scatter'].indexOf(bi.type) == -1) {
            options.tooltip.trigger = 'item';
        }

        //处理结构
        switch( bi.type ){

            case 'wordCloud':
                    delete chartSeries.itemStyle;
                    delete options.dataset;
                break;

            case 'Gauge':
            case 'radar':
                    delete options.dataset;
                break;

            case 'pie':
            case 'funnel':
                    options.dataset.source[0].push('值');
                    options.series.push(chartSeries);
                break;

            case 'map':

                    var max_value=0;
                    for( var k in bi_column ){
                        var temp = Object.keys(data).sort(function(a,b){return data[a][bi_column[k]] < data[b][bi_column[k]]});
                        if( data[temp[0]][bi_column[k]] >= max_value ){
                            max_value = data[temp[0]][bi_column[k]];
                        }
                        options.dataset.source[0].push(bi_column[k]);
                    }

                    if( typeof options.visualMap != 'undefined') {
                        options.visualMap.max = max_value;
                    }
                    if( Object.prototype.toString.call(chartSeries)  === '[object Array]' ){//突出省份地图，结构错误取数组中的对象
                        chartSeries = F.extend(chartSeries[0],chartSeries['itemStyle']);
                    }

                     options.series.push(chartSeries);
                break;

            default:
                delete chartSeries.itemStyle;

                var series = F.extend(WeBI.webi_dt.module[uid].chart_json, WeBI.chart.default()).series;

                for( var k in bi_column ){
                    options.dataset.source[0].push(bi_column[k]);
                    var tempO = F.extend({},chartSeries); //创建新对象，防止造成数组索引都指向一个JS对象

                    tempO.color = colorList[k];

                    //设置数据列属性
                    if( !F.isEmptyObject(series) ){
                        for( var r in series){

                            if( series[r].alias == bi_column[k] ){
                                tempO.name = bi_column[k];

                                //标线
                                var dataLine = series[r].dataLine.split(',');
                                tempO.markLine = {
                                    data : [
                                        {type : 'average', name: '平均值',lineStyle:{color:''}},
                                        {type : 'max', name: '最大值',lineStyle:{color:''}},
                                        {type : 'min', name: '最小值',lineStyle:{color:''}}
                                    ]   //标线数据
                                };

                                for( var i=2; i >=0; i--){
                                    if(dataLine[i] == 1){
                                        tempO.markLine.data[i]['lineStyle']['color'] = series[r].dataLineColor;
                                    } else {
                                        tempO.markLine.data.splice(i,1);
                                    }
                                }

                                //标注
                                if( series[r].label == 1 ){
                                    tempO.markPoint = {
                                        data: [
                                            {type: 'max', name: '最大值'},
                                            {type: 'min', name: '最小值'}
                                        ]
                                    }
                                } else {
                                    delete tempO.markPoint;
                                }
                            }
                        }
                    }

                    options.series.push(tempO);
                }

        }

        //拼接数据
        switch( bi.type ) {

            case 'wordCloud':
                chartSeries.textStyle.normal.color = function () {
                    return 'rgb('
                        + [Math.round(Math.random() * 160),
                            Math.round(Math.random() * 160),
                            Math.round(Math.random() * 160)]
                            .join(',') + ')';
                };
                chartSeries.data = [];
                for (var k in data) {
                    chartSeries.data.push({
                        name: data[k][bi_row[0]],
                        value: data[k][bi_column[0]]
                    });
                }
                options.series.push(chartSeries);
                break;

            case 'Gauge':
                var target_value = parseInt(data[0][bi_column[0]]);
                chartSeries.radius = '100%';

                chartSeries.data = [
                    {
                        name: bi_column[0],
                        value: target_value
                    }
                ];

                if (chartSeries.max) {
                    chartSeries.max = parseInt(target_value * 1.1);
                    chartSeries.splitNumber = 8;
                }
                options.series.push(chartSeries);
                break;

            case 'radar':
                options.radar.indicator = [];
                chartSeries.data = [
                    {
                        value: [],
                        name: '数据'
                    }
                ];

                for (var k in bi_column) {
                    options.radar.indicator.push({
                        name: bi_column[k]
                    });
                }
                var tooltip_val = [];
                for (var k in data) {
                    for (var j in bi_column) {
                        chartSeries.data[0].value.push(data[k][bi_column[j]]);
                    }
                }

                options.series.push(chartSeries);
                break;

            default:

                for(var k in data){
                    var key = parseInt(k)+1;
                    options.dataset.source[key] = [];
                    options.dataset.source[key].push(data[k][bi_row[0]]);
                    for(var j in bi_column){
                        options.dataset.source[key].push(data[k][bi_column[j]]);
                    }
                }

        }

        //序列属性
        if(!F.isEmptyObject(attribute_data.series)) {

            var format_arr = {};
            for( k in attribute_data.series ){
                format_arr[k.split(':')[1]] = attribute_data.series[k];
            }

            switch( bi.type ) {

                case 'Gauge':

                    //显示数据
                    options.series[0].detail.formatter = function (params) {
                        var cur = format_arr[options.series[0].data[0].name];
                        return  WeBI.attribute.unit(
                                    options.series[0].data[0].value,
                                    cur.val_format,
                                    cur.unit_format,
                                    cur.decimal_num
                                );
                    }

                    options.tooltip.formatter = function(params) {

                        var cur = format_arr[params.name];
                        var value =  WeBI.attribute.unit(
                            params.value,
                            cur.val_format,
                            cur.unit_format,
                            cur.decimal_num
                        );

                        var tool_tip_str = '';
                            tool_tip_str += params.name + '<br/>';
                            tool_tip_str += value ;

                        return tool_tip_str;
                    }

                    break;

                case 'radar':

                    options.tooltip.formatter =  function(params) {

                        var tool_tip_str = '';
                        tool_tip_str += params.name + '<br/>';

                        var len = options.radar.indicator.length;

                        for(var i=0; i<len; i++) {
                            var cur = format_arr[options.radar.indicator[i].name];
                            var value = options.series[0].data[0].value[i];

                            if( cur ){ //格式化处理
                                value = WeBI.attribute.unit(
                                    value,
                                    cur.val_format,
                                    cur.unit_format,
                                    cur.decimal_num
                                );
                            }

                            tool_tip_str += options.radar.indicator[i].name + ':' + value + '<br/>' ;
                        }

                        return tool_tip_str;

                    }

                    break;

                default:

                    options.tooltip.formatter =  function(params){

                        if(!Array.isArray(params)){
                            var Data = [];
                            Data.push(params);
                        } else {
                            var Data = params;
                        }

                        var len = Data.length;

                        var tool_tip_str = '';
                        tool_tip_str += Data[0].name + '<br/>';

                        for(var i=0; i<len; i++) {

                            var cur = format_arr[Data[i].seriesName];
                            if(Array.isArray(Data[i].value)){
                                var value = Data[i].value[options.dataset.source[0].indexOf(Data[i].seriesName)];
                            } else {
                                var value = Data[i].value;
                            }

                            if( cur ){ //格式化处理
                                value = WeBI.attribute.unit(
                                    value,
                                    cur.val_format,
                                    cur.unit_format,
                                    cur.decimal_num
                                );
                            }

                            tool_tip_str += Data[i].seriesName + ':' + value + '<br/>' ;

                        }

                        return tool_tip_str;

                    }

            }

        }

        //对最终结构的处理
        switch (bi.type) {

            case 'wordCloud':
                delete options.tooltip.formatter;
                break;

            case 'scatter':
                delete options.tooltip.formatter;
                options.dataset.source.splice(0, 1); //散点图不需要第一行的维度，需要纯数字行的数据
                break;

            case 'bar':
                if (bi.chart_id == 19) {//折线&柱状图
                    options.series[(options.series).length - 1].type = 'line';
                }
                break;

            case 'pie':
                if (bi.chart_id == 22) {//南丁格尔图
                    delete options.visualMap;
                }
                break;

            default:
                console.log('');
        }

        return options;
    }
    WeBI.chart.receiveJson = function(uid, data) {

        //获取图表属性设置
        var chartAttr = F.extend(WeBI.webi_dt.module[uid].chart_json, WeBI.chart.default());

        var options = WeBI.chart.dataHandle(WeBI.chart.structure(),data,uid);

        var legend = chartAttr.legend;
        var title = chartAttr.title;
        var xAxis = chartAttr.xAxis;
        var yAxis = chartAttr.yAxis;
        var tooltip = chartAttr.tooltip;
        var toolbox = chartAttr.toolbox;
        var general = WeBI.webi_dt.module[uid].attribute_json.general;
        var bi = WeBI.webi_dt.module[uid].bi_json;

        //图例设置
        if(parseInt(legend.switch) == 1){
            delete options.legend.data;
            options.legend.show = true;
            options.legend.x = legend.x;
            options.legend.y = legend.y;
        }

        //标题设置
        if(parseInt(title.switch) == 1){
            options.title = {
                show: true,
                x: title.x, //X轴对齐方式主标题
                y: title.y, //Y轴对齐方式主标题
                text: title.mainTitle || '', //主标题
                subtext: title.subTitle || '', //副标题
                sublink: title.link || '', //副标题链接
                subtarget: (title.target).substr(1), //副标题链接打开方式
                backgroundColor: title.backgroundColor || '', //标题背景色
                textStyle: { //主标题字体设置
                    fontFamily : title.fontFamily || '',
                    fontSize : title.fontSize || '12',
                    color : title.color || '#000',
                    fontStyle : title.fontStyle || 'normal',
                    fontWeight : title.fontWeight || 'normal'
                }
            }
        }

        //Y坐标轴设置
        if( parseInt(yAxis.switch) == 1 && typeof options.yAxis != 'undefined') {
            options.yAxis.show = true;
            options.yAxis.name = yAxis.text || '';
            options.yAxis.nameTextStyle = {
                fontFamily : yAxis.fontFamily || '',
                fontSize : (yAxis.fontSize || '12')+'px',
                color : yAxis.color || '#000',
                fontStyle : yAxis.fontStyle || 'normal',
                fontWeight : yAxis.fontWeight || 'normal'
            };
            options.yAxis.axisLabel = {
                show: true,
                textStyle: {
                    color: yAxis.color || '#ccc'
                }
            };
        }

        //X坐标轴设置
        if( parseInt(xAxis.switch) == 1 && typeof options.xAxis != 'undefined') {
            options.xAxis.show = true;
            options.xAxis.name = xAxis.text || '';
            options.xAxis.nameTextStyle = {
                fontFamily : xAxis.fontFamily || '',
                fontSize : (xAxis.fontSize || '12')+'px',
                color : xAxis.color || '#000',
                fontStyle : xAxis.fontStyle || 'normal',
                fontWeight : xAxis.fontWeight || 'normal'
            };
            options.xAxis.axisLabel = {
                show: true,
                textStyle: {
                    color: xAxis.color || '#FF1493'
                }
            };
        }

        //X轴缩放
        var x_scale = xAxis.scale.split(',');
        if(parseInt(x_scale[0]) == 1) { //显示
            options.dataZoom[0].show = true;
            options.dataZoom[0].start = parseInt(x_scale[1]);
            options.dataZoom[0].end = parseInt(x_scale[2]);
            options.dataZoom[1].disabled = false;
            options.dataZoom[1].start = parseInt(x_scale[1]);
            options.dataZoom[1].end = parseInt(x_scale[2]);
        }

        //Y轴缩放
        var y_scale = yAxis.scale.split(',');
        if(parseInt(y_scale[0]) == 1) { //显示
            options.dataZoom[2].show = true;
            options.dataZoom[2].start = parseInt(y_scale[1]);
            options.dataZoom[2].end = parseInt(y_scale[2]);
            options.dataZoom[3].disabled = false;
            options.dataZoom[3].start = parseInt(y_scale[1]);
            options.dataZoom[3].end = parseInt(y_scale[2]);
        }

        //提示设置
        if(parseInt(tooltip.switch) == 1) {

            options.tooltip.show = true;

            //背景色
            if (tooltip.backgroundColor.charAt(0) == 1) {
                options.tooltip.backgroundColor = tooltip.backgroundColor.substr(2) || '';
            }

            //边框宽度、颜色
            if (tooltip.borderWidth.charAt(0) == 1) {
                options.tooltip.borderWidth = (tooltip.borderWidth.substr(2) || '1') + 'px';
                options.tooltip.borderColor = tooltip.borderColor.substr(2) || '';
            }

            //提示字体设置对象初始化
            options.tooltip.textStyle = {
                fontFamily: tooltip.fontFamily || '',
                fontSize: (tooltip.fontSize || '12') + 'px',
                color: tooltip.color || '#000',
                fontWeight: tooltip.fontWeight || 'normal'
            };

        }

        //工具栏
        if( parseInt(toolbox.dataZoom) == 1 && typeof options.toolbox.feature.dataZoom != 'undefined'){
            options.toolbox.feature.dataZoom.show = true;
        }
        if( parseInt(toolbox.dataView) == 1 ){
            options.toolbox.feature.dataView.show = true;
        }
        if( parseInt(toolbox.magicType) == 1 ){
            options.toolbox.feature.magicType.show = true;
        }
        if( parseInt(toolbox.restore) == 1 ){
            options.toolbox.feature.restore.show = true;
        }

        if(parseInt(toolbox.saveAsImage) == 1) {
            options.toolbox.feature.saveAsImage.show = true;
        }

        //全局背景色设置
        options.backgroundColor = general.backgroundColor || '';

        //去除缩放控件、X轴、Y轴
        switch ( bi.type ){

            case 'wordCloud':
                delete options.textStyle;
                delete options.dataZoom;
                delete options.yAxis;
                delete options.xAxis;
                break;

            case 'Gauge':
                delete options.textStyle;
                delete options.dataZoom;
                delete options.yAxis;
                delete options.xAxis;
                break;

            case 'radar':
                delete options.legend;
                delete options.dataZoom;
                delete options.yAxis;
                delete options.xAxis;
                break;

            case 'pie':
                delete options.dataZoom;
                delete options.yAxis;
                delete options.xAxis;
                break;

            case 'map':
                delete options.dataZoom;
                delete options.yAxis;
                delete options.xAxis;
                break;

            case 'funnel':
                delete options.dataZoom;
                delete options.yAxis;
                delete options.xAxis;
                break;

            case 'bar':
                //堆叠图
               if(typeof options.series[0].stack != 'undefined'){
                    delete options.toolbox;
                    delete options.dataZoom;
               }
               break;
        }

        WeBI.op.bi_obj[uid].setOption(options);

    };
    WeBI.chart.handel = function(uid, bi, db_json, attribute) {

        if( F.mobile ){ //移动端采用SVG渲染，减少内存开销
            WeBI.op.bi_obj[uid] = echarts.init(document.getElementById(WeBI.op.chart.bi+uid), null, {renderer: 'svg'});
        } else {
            WeBI.op.bi_obj[uid] = echarts.init(document.getElementById(WeBI.op.chart.bi+uid));
        }

        //联动属性-点击事件
        if (!BI.isEmptyObject(WeBI.webi_dt.module[uid].chart_json.linkage)) {
            WeBI.op.bi_obj[uid].on('click', function (params) {
                WeBI.chart.chartsClick(uid,params);
            });
        }

        WeBI.chart.dbhandle(uid,bi,db_json,attribute);
        WeBI.op.jsonSend(uid,[]);
    };
    WeBI.chart.resize = function(uid) {
        if( typeof WeBI.op.bi_obj[uid] != 'undefined' ){
            WeBI.op.bi_obj[uid].resize();
        }
    };
    WeBI.chart.chartsClick = function(uid,params) {
        var linkag = WeBI.webi_dt.module[uid].chart_json.linkage;
        var row_arr = WeBI.webi_dt.module[uid].db_json.row.split(',');
        var uuid_array = {};//关联BI组件及where参数
        var row = [];//BI组件维度及对应数据名

        for (var r=0,len=row_arr.length;r<len;r++) {
            row[row_arr[r].split(':')[0]] = (params.name).split('-')[r];
        }

        //组织需要联动的uuid数组
        for (var k in linkag) {
            if (BI.isEmptyObject(linkag[k])) {
                continue;
            }

            if (!BI.isEmptyObject(linkag[k].same)){
                for (var s=0,len=(linkag[k].same).length;s<len;s++) {
                    if (typeof uuid_array[linkag[k].same[s]] == 'undefined') {
                        uuid_array[linkag[k].same[s]] = {};
                    }

                    uuid_array[linkag[k].same[s]][k] = row[k];
                }
            }

            if (!BI.isEmptyObject(linkag[k].different)) {
                for (var i in linkag[k].different) {
                    if (uuid_array[i] == 'undefined') {
                        continue;
                    }

                    var different = linkag[k].different[i];

                    for (var j=0,len=different.length;j<len;j++) {

                        if (typeof uuid_array[i] == 'undefined') {
                            uuid_array[i] = {};
                        }

                        uuid_array[i][different[j]] = row[k];
                    }
                }
            }
        }

        //请求需要联动的数据
        if (uuid_array != 'undefined') {
            for (var id in uuid_array) {

                if (id != 'indexOfElem' || id != 'undefined') {
                    WeBI.op.jsonSend(id, uuid_array[id]);
                }
            }
        }

    };

    WeBI.attribute = {}; //序列属性

    /*
     * 序列单位格式
     * @param num 需要操作的数据
     * @param val_format 值格式
     * @param unit_format 单位格式 0.无 1.固定千 2.固定万 3.固定亿 4.自动千 5.自动万 6.自动亿
     * @param decimal_num 精确小数点位数
     */
    WeBI.attribute.unit = function(num, val_format, unit_format, decimalNum) {
        if( !F.isNumber(num) ) {
            return num;
        }

        var unit = '';
        var decimal_num = decimalNum || 0;

        //固定千
        function fixedThousand(num){
            return num < 1000 ? 0 : num/1000;
        };
        //固定万
        function fixedMillion(num){
            return num < 10000 ? 0 : num/10000;
        };
        //固定亿
        function fixedBillion(num){
            return num < 100000000 ? 0 : num/100000000;
        };
        //自动千
        function autoThousand(num){
            var format = {
                'num': num,
                'unit': ''
            }
            if(  num >= 1000 ){
                format['num'] =  num/1000;
                format['unit'] = '千';
            }

            return format;
        };
        //自动万
        function autoMillion(num){
            var format = {
                'num': num,
                'unit': ''
            }
            if(  num >= 10000 ){
                format['num'] =  num/10000;
                format['unit'] = '万';
            }

            return format;
        };
        //自动亿
        function autoBillion(num){
            var format = {
                'num': num,
                'unit': ''
            }
            if(  num >= 100000000 ){
                format['num'] =  num/100000000;
                format['unit'] = '亿';
            }

            return format;
        };

        switch( parseInt(unit_format) ) {

            case 1:
                var format_num = fixedThousand(num);
                unit = '千';
                break;

            case 2:
                var format_num = fixedMillion(num);
                unit = '万';
                break;

            case 3:
                var format_num = fixedBillion(num);
                unit = '亿';
                break;

            case 4:
                var format_num = autoThousand(num);
                break;

            case 5:
                var format_num = autoMillion(num);
                break;

            case 6:
                var format_num = autoBillion(num);
                break;

            default:
                var format_num = num;

        }

        //自动值（单位 单独确定）
        if( typeof format_num == 'object') {
            unit = format_num['unit'] ? format_num['unit'] : '';
            format_num = format_num['num'];
        }

        //百分比  不处理数据格式
        format_num = (val_format == 3) ? num : format_num;

        format_num =   Math.round( parseFloat(format_num) ).toFixed(decimal_num);//小数点位数  数据四舍五入
        format_num = this.format(format_num,val_format,unit);//值格式

        return format_num;

    };

    /*
     * 序列值格式
     * @param num 需要操作的数据
     * @param format 格式 1.常规  2.货币  3.百分比
     * @param unit 单位
     */
    WeBI.attribute.format = function(num, format, unit) {

        //数组转货币格式
        function digitalConver(num){

            if ( parseInt(num).length <= 3 ) {
                return num;
            } else {
                var dec_point = '';
                var number = num.split('.')[0];
                if( typeof num.split('.')[1] != 'undefined' ){
                    dec_point = '.' + num.split('.')[1];
                }

                var mod = number.length % 3;
                var output = (mod == 0 ? '' : (number.substring(0,mod)));
                for (i=0 ; i< Math.floor(number.length/3) ; i++)
                {
                    if ((mod ==0) && (i ==0))
                        output+= number.substring(mod+3*i,mod+3*i+3);
                    else
                        output+= ',' + number.substring(mod+3*i,mod+3*i+3);
                }

                return (output + dec_point);
            }

        };

        switch( parseInt(format) ) {

            case 2:
                if( num > 0 ){
                   var num_arr = digitalConver(num);
                } else {
                    var num_arr = '0.00';
                }

                var deal_num =  num_arr + unit;
                break;

            case 3:
               var deal_num = num + '%';
                break;

            default:
                var deal_num = num + unit;

        }
        return deal_num;
    };

	window.WeBI = WeBI;
})();